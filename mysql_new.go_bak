package zmysql

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
)

// 通用的扫描逻辑
func scanRows(rows *sql.Rows, destValue reflect.Value, sliceElemType reflect.Type) error {
	columns, err := rows.Columns()
	if err != nil {
		return fmt.Errorf("failed to get columns: %v", err)
	}

	fieldsMapping := mysql_client.getFieldsMapping(sliceElemType)
	results := reflect.MakeSlice(destValue.Elem().Type(), 0, 0)
	scanDest := make([]any, len(columns))

	for i := range columns {
		if fieldIndex, ok := fieldsMapping[columns[i]]; ok {
			fieldType := sliceElemType.Field(fieldIndex).Type
			scanDest[i] = reflect.New(fieldType).Interface()
		} else {
			scanDest[i] = new(any) // 忽略未定义的字段
		}
	}

	for rows.Next() {
		newItem := reflect.New(sliceElemType).Elem()
		if err := rows.Scan(scanDest...); err != nil {
			return fmt.Errorf("failed to scan row: %v", err)
		}

		for i, col := range columns {
			if fieldIndex, ok := fieldsMapping[col]; ok {
				field := newItem.Field(fieldIndex)
				value := reflect.ValueOf(scanDest[i]).Elem()
				field.Set(value)
			}
		}
		results = reflect.Append(results, newItem)
	}

	if err := rows.Err(); err != nil {
		return fmt.Errorf("rows iteration error: %v", err)
	}

	destValue.Elem().Set(results)
	return nil
}

// Find 执行查询并将结果映射到结构体中 列表查询
func Find(dest any, query string, args ...any) error {
	mysql_client.debugLog(query, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr || destValue.Elem().Kind() != reflect.Slice {
		return fmt.Errorf("dest must be a pointer to a slice")
	}

	sliceElemType := destValue.Elem().Type().Elem()
	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	return scanRows(rows, destValue, sliceElemType)
}

// FindProc 执行存储过程并将结果映射到结构体中 列表查询
func FindProc(dest any, procName string, args ...any) error {
	mysql_client.debugLog(procName, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr || destValue.Elem().Kind() != reflect.Slice {
		return fmt.Errorf("dest must be a pointer to a slice")
	}

	sliceElemType := destValue.Elem().Type().Elem()
	placeholders := strings.TrimSuffix(strings.Repeat("?,", len(args)), ",")
	query := fmt.Sprintf("CALL `%s`(%s)", procName, placeholders)

	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	return scanRows(rows, destValue, sliceElemType)
}

// First 执行查询并将结果映射到结构体中，查询一条数据
func First(dest any, query string, args ...any) (bool, error) {
	mysql_client.debugLog(query, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr || destValue.Elem().Kind() != reflect.Struct {
		return false, fmt.Errorf("dest must be a pointer to a struct")
	}

	structType := destValue.Elem().Type()
	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return false, fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return false, fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return false, fmt.Errorf("failed to get columns: %v", err)
	}

	fieldsMapping := mysql_client.getFieldsMapping(structType)
	scanDest := make([]any, len(columns))

	for i := range columns {
		if fieldIndex, ok := fieldsMapping[columns[i]]; ok {
			fieldType := structType.Field(fieldIndex).Type
			scanDest[i] = reflect.New(fieldType).Interface()
		} else {
			scanDest[i] = new(any)
		}
	}

	if rows.Next() {
		if err := rows.Scan(scanDest...); err != nil {
			return false, fmt.Errorf("failed to scan row: %v", err)
		}

		for i, col := range columns {
			if fieldIndex, ok := fieldsMapping[col]; ok {
				field := destValue.Elem().Field(fieldIndex)
				value := reflect.ValueOf(scanDest[i]).Elem()
				field.Set(value)
			}
		}
		return true, nil
	}

	return false, nil
}

// FirstProc 执行存储过程并将结果映射到结构体中，查询一条数据
func FirstProc(dest any, procName string, args ...any) (bool, error) {
	mysql_client.debugLog(procName, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr || destValue.Elem().Kind() != reflect.Struct {
		return false, fmt.Errorf("dest must be a pointer to a struct")
	}

	structType := destValue.Elem().Type()
	placeholders := strings.TrimSuffix(strings.Repeat("?,", len(args)), ",")
	query := fmt.Sprintf("CALL `%s`(%s)", procName, placeholders)

	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return false, fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return false, fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return false, fmt.Errorf("failed to get columns: %v", err)
	}

	fieldsMapping := mysql_client.getFieldsMapping(structType)
	scanDest := make([]any, len(columns))

	for i := range columns {
		if fieldIndex, ok := fieldsMapping[columns[i]]; ok {
			fieldType := structType.Field(fieldIndex).Type
			scanDest[i] = reflect.New(fieldType).Interface()
		} else {
			scanDest[i] = new(any)
		}
	}

	if rows.Next() {
		if err := rows.Scan(scanDest...); err != nil {
			return false, fmt.Errorf("failed to scan row: %v", err)
		}

		for i, col := range columns {
			if fieldIndex, ok := fieldsMapping[col]; ok {
				field := destValue.Elem().Field(fieldIndex)
				value := reflect.ValueOf(scanDest[i]).Elem()
				field.Set(value)
			}
		}
		return true, nil
	}

	return false, nil
}

// FirstCol 执行查询并将单个字段值映射到基础类型
func FirstCol(dest any, query string, args ...any) (bool, error) {
	mysql_client.debugLog(query, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr {
		return false, fmt.Errorf("dest must be a pointer to a basic type")
	}

	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return false, fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return false, fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return false, fmt.Errorf("failed to get columns: %v", err)
	}

	if len(columns) != 1 {
		return false, fmt.Errorf("expected a single column result, but got %d columns", len(columns))
	}

	if rows.Next() {
		var scanDest any
		switch destValue.Elem().Kind() {
		case reflect.String:
			var s string
			scanDest = &s
		case reflect.Int:
			var i int
			scanDest = &i
		case reflect.Int64:
			var i int64
			scanDest = &i
		case reflect.Float64:
			var f float64
			scanDest = &f
		default:
			return false, fmt.Errorf("unsupported type: %s", destValue.Elem().Kind())
		}

		if err := rows.Scan(scanDest); err != nil {
			return false, fmt.Errorf("failed to scan column: %v", err)
		}

		destValue.Elem().Set(reflect.ValueOf(scanDest).Elem())
		return true, nil
	}

	return false, nil
}

// FirstColProc 执行存储过程并将单个字段值映射到基础类型
func FirstColProc(dest any, procName string, args ...any) (bool, error) {
	mysql_client.debugLog(procName, args...)
	destValue := reflect.ValueOf(dest)
	if destValue.Kind() != reflect.Ptr {
		return false, fmt.Errorf("dest must be a pointer to a basic type")
	}

	placeholders := strings.TrimSuffix(strings.Repeat("?,", len(args)), ",")
	query := fmt.Sprintf("CALL `%s`(%s)", procName, placeholders)

	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return false, fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return false, fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	columns, err := rows.Columns()
	if err != nil {
		return false, fmt.Errorf("failed to get columns: %v", err)
	}

	if len(columns) != 1 {
		return false, fmt.Errorf("expected a single column result, but got %d columns", len(columns))
	}

	if rows.Next() {
		var scanDest any
		switch destValue.Elem().Kind() {
		case reflect.String:
			var s string
			scanDest = &s
		case reflect.Int:
			var i int
			scanDest = &i
		case reflect.Int64:
			var i int64
			scanDest = &i
		case reflect.Float64:
			var f float64
			scanDest = &f
		default:
			return false, fmt.Errorf("unsupported type: %s", destValue.Elem().Kind())
		}

		if err := rows.Scan(scanDest); err != nil {
			return false, fmt.Errorf("failed to scan column: %v", err)
		}

		destValue.Elem().Set(reflect.ValueOf(scanDest).Elem())
		return true, nil
	}

	return false, nil
}

// 执行存储过程并将多个结果集映射到多个目标结构体或切片中
func FindMultipleProc(dest []any, procName string, args ...any) error {
	mysql_client.debugLog(procName, args...)

	// 检查目标参数 dest 是否是包含切片或结构体指针的切片
	if len(dest) == 0 {
		return fmt.Errorf("dest cannot be empty")
	}

	placeholders := strings.TrimSuffix(strings.Repeat("?,", len(args)), ",")
	query := fmt.Sprintf("CALL `%s`(%s)", procName, placeholders)

	stmt, err := mysql_client.DB.Prepare(query)
	if err != nil {
		return fmt.Errorf("failed to prepare query: %v", err)
	}
	defer stmt.Close()

	rows, err := stmt.Query(args...)
	if err != nil {
		return fmt.Errorf("failed to execute query: %v", err)
	}
	defer rows.Close()

	for index := 0; ; index++ {
		if index >= len(dest) {
			return fmt.Errorf("too many result sets, expected %d", len(dest))
		}

		destValue := reflect.ValueOf(dest[index])
		if destValue.Kind() != reflect.Ptr {
			return fmt.Errorf("dest[%d] must be a pointer", index)
		}

		kind := destValue.Elem().Kind()
		if kind != reflect.Slice && kind != reflect.Struct {
			return fmt.Errorf("dest[%d] must be a pointer to a struct or slice", index)
		}

		sliceElemType := destValue.Elem().Type()
		if kind == reflect.Slice {
			sliceElemType = sliceElemType.Elem()
		}

		columns, err := rows.Columns()
		if err != nil {
			return fmt.Errorf("failed to get columns: %v", err)
		}

		fieldsMapping := mysql_client.getFieldsMapping(sliceElemType)
		scanDest := make([]any, len(columns))

		for i := range columns {
			if fieldIndex, ok := fieldsMapping[columns[i]]; ok {
				fieldType := sliceElemType.Field(fieldIndex).Type
				scanDest[i] = reflect.New(fieldType).Interface()
			} else {
				scanDest[i] = new(any) // 忽略未定义的字段
			}
		}

		if kind == reflect.Slice {
			results := reflect.MakeSlice(destValue.Elem().Type(), 0, 0)

			for rows.Next() {
				newItem := reflect.New(sliceElemType).Elem()
				if err := rows.Scan(scanDest...); err != nil {
					return fmt.Errorf("failed to scan row: %v", err)
				}

				for i, col := range columns {
					if fieldIndex, ok := fieldsMapping[col]; ok {
						field := newItem.Field(fieldIndex)
						value := reflect.ValueOf(scanDest[i]).Elem()
						field.Set(value)
					}
				}

				results = reflect.Append(results, newItem)
			}

			destValue.Elem().Set(results)
		} else {
			if rows.Next() {
				newItem := reflect.New(sliceElemType).Elem()
				if err := rows.Scan(scanDest...); err != nil {
					return fmt.Errorf("failed to scan row: %v", err)
				}

				for i, col := range columns {
					if fieldIndex, ok := fieldsMapping[col]; ok {
						field := newItem.Field(fieldIndex)
						value := reflect.ValueOf(scanDest[i]).Elem()
						field.Set(value)
					}
				}

				destValue.Elem().Set(newItem)
			}
		}

		if !rows.NextResultSet() {
			break
		}
	}

	return nil
}
